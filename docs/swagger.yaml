definitions:
  controllers.Response:
    properties:
      message: {}
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Notif:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      relation_id:
        type: integer
      type:
        type: string
      user_id:
        type: integer
    type: object
  models.NotifRequest:
    properties:
      message:
        type: string
      relation_id:
        type: integer
      type:
        type: string
      user_id:
        type: integer
    required:
    - message
    - relation_id
    - type
    - user_id
    type: object
  models.Offers:
    properties:
      comments:
        type: string
      contractor_id:
        type: integer
      created_at:
        type: string
      delivery_time:
        type: string
      id:
        type: integer
      price:
        type: number
      status:
        type: boolean
      tender_id:
        type: integer
      updated_at:
        type: string
    required:
    - contractor_id
    - tender_id
    type: object
  models.OffersRequest:
    properties:
      comments:
        type: string
      contractor_id:
        type: integer
      delivery_time:
        type: string
      price:
        type: number
      status:
        type: boolean
      tender_id:
        type: integer
    required:
    - comments
    - contractor_id
    - delivery_time
    - price
    - tender_id
    type: object
  models.TenderRequest:
    properties:
      budget:
        type: number
      client_id:
        type: integer
      deadline:
        type: string
      description:
        type: string
      file_url:
        type: string
      title:
        type: string
    required:
    - budget
    - client_id
    - deadline
    - description
    - title
    type: object
  models.Tenders:
    properties:
      budget:
        type: number
      client_id:
        type: integer
      created_at:
        type: string
      deadline:
        type: string
      description:
        type: string
      file_url:
        type: string
      id:
        type: integer
      status:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
    required:
    - client_id
    type: object
  models.UserRegister:
    properties:
      email:
        type: string
      first_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        enum:
        - client
        - contractor
        type: string
    required:
    - email
    - first_name
    - phone_number
    - role
    type: object
  models.VerifyRequest:
    properties:
      code:
        type: string
      phone_number:
        type: string
    type: object
info:
  contact:
    email: muhtorhongofurov@gmail.com
    name: Muxtorxon Gofurov
    url: https://github.com/muhtorkhon
  description: Tender Management Golang REST API
  title: Tender Management REST API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Allows a user to log in using email and password. If valid, returns
        a JWT token.
      parameters:
      - description: Login Credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully restored the category
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controllers.Response'
        "401":
          description: 'Unauthorized: Invalid credentials'
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user by providing phone number, email, and password.
      parameters:
      - description: User Registration Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegister'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the user
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Create a new user
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Verifies the user's phone number using the code sent earlier. If
        valid, activates the user.
      parameters:
      - description: Phone number and code verification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.VerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User verified and activated successfully
          schema:
            type: string
        "400":
          description: Invalid or expired code
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Verify phone number with the code
      tags:
      - auth
  /client/notifs/{user_id}/{relation_id}:
    get:
      description: Client uchun o‘ziga tegishli xabarni olish
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Relation ID
        in: path
        name: relation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notif'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Notif not found
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get Client Notification
      tags:
      - Notifications
  /contractor/notifs/{user_id}/{relation_id}:
    get:
      description: Contractor uchun o‘ziga tegishli xabarni olish
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Relation ID
        in: path
        name: relation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notif'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Notif not found
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get Contractor Notification
      tags:
      - Notifications
  /notifs:
    post:
      consumes:
      - application/json
      description: Yangi xabar yaratish (Client yoki Contractor uchun)
      parameters:
      - description: Notification Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.NotifRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Notif'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Create Notification
      tags:
      - Notifications
  /offers:
    get:
      description: Retrieve a paginated list of all offers.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Offers'
            type: array
        "500":
          description: Failed to fetch offers
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get all offers
      tags:
      - offers
    post:
      consumes:
      - application/json
      description: This endpoint creates a new offer with the provided details.
      parameters:
      - description: Offer Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.OffersRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Offers'
        "400":
          description: Failed to parse request body
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Failed to create offer
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Create a new offer
      tags:
      - offers
  /offers/{contractor_id}:
    get:
      description: Retrieve an offer by its ID.
      parameters:
      - description: Contractor ID
        in: path
        name: contractor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Offers'
        "404":
          description: Offer not found
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get a specific offer
      tags:
      - offers
  /offers/{id}:
    delete:
      description: Mark an offer as deleted by setting the DeletedAt field.
      parameters:
      - description: Offer ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Offer deleted successfully
          schema:
            type: string
        "404":
          description: Offer not found
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Soft delete an offer
      tags:
      - offers
    put:
      consumes:
      - application/json
      description: Update the details of an offer by its ID.
      parameters:
      - description: Offer ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated offer details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.OffersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OffersRequest'
        "400":
          description: Failed to parse request body
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Offer not found
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Update an existing offer
      tags:
      - offers
  /offers/{id}/restore:
    patch:
      description: Restore an offer that was previously soft deleted.
      parameters:
      - description: Offer ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Offer restored successfully
          schema:
            type: string
        "404":
          description: Offer not found
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Restore a soft-deleted offer
      tags:
      - offers
  /offers/filter:
    get:
      consumes:
      - application/json
      description: Retrieves offers with minimum and maximum prices and delivery times,
        along with their counts.
      produces:
      - application/json
      responses:
        "200":
          description: Details of min/max offers and counts
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Error message
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get min, max prices and delivery times with filtered count
      tags:
      - offers
  /offers/sorted:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a list of offers with pagination, sorted
        by price and delivery time.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of offers per page
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with offers and total count
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get filtered and sorted offers with pagination
      tags:
      - offers
  /tenders:
    get:
      description: Retrieve all tenders with pagination support
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tenders'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      summary: Get all tenders with pagination
      tags:
      - tender
    post:
      consumes:
      - application/json
      description: Creates a new tender with the provided details
      parameters:
      - description: Tender Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.TenderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tenders'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Create a new tender
      tags:
      - tender
  /tenders/{client_id}:
    get:
      description: Retrieve all tenders for a specific client
      parameters:
      - description: Client ID
        in: path
        name: client_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tenders'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Get tenders by client ID
      tags:
      - tender
  /tenders/{id}:
    delete:
      consumes:
      - application/json
      description: Marks a tender as deleted by setting the `DeletedAt` timestamp.
      parameters:
      - description: Tender ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tender deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Tender not found or already deleted
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Soft delete a tender by ID
      tags:
      - tender
    put:
      consumes:
      - application/json
      description: Updates the details of an existing tender
      parameters:
      - description: Tender ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Tender Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.TenderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.Response'
        "404":
          description: Tender not found
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Update an existing tender
      tags:
      - tender
  /tenders/restore/{id}:
    patch:
      consumes:
      - application/json
      description: Restores a tender by removing the `DeletedAt` timestamp, making
        it active again.
      parameters:
      - description: Tender ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tender restored successfully
          schema:
            type: string
        "404":
          description: Tender not found or already active
          schema:
            $ref: '#/definitions/controllers.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - BearerAuth: []
      summary: Restore a soft deleted tender by ID
      tags:
      - tender
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: Bearer token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
